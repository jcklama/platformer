const Game = function () {

    this.worldWidth = document.querySelector('canvas').clientWidth;
    this.worldHeight = document.querySelector('canvas').clientHeight;
    this.gravity = 3;
    this.player = new Game.Player();
    this.collider = new Game.Collider();

    this.columns = 40;
    this.rows = 32;        // unused?
    this.tilesize = 16;    // unused?
    this.map = [
        479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 519, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 522, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 273, 638, 638, 638, 639, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 515, 515, 515, 515, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 351, 521, 521, 521, 522, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 201, 202, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 240, 241, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 277, 469, 279, 280, 281, 282, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 316, 317, 318, 319, 320, 321, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 600, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 357, 358, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 273, 638, 638, 469, 470, 471, 472, 473, 474, 475, 476, 638, 638, 638, 639, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 396, 397, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 519, 521, 521, 521, 521, 521, 521, 521, 521, 522, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 160, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 160, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 351, 521, 199, 479, 479, 479, 479, 479, 273, 638, 638, 639, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 277, 278, 278, 278, 278, 278, 278, 281, 282, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 316, 317, 318, 370, 370, 370, 319, 320, 321, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 351, 521, 521, 522, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 369, 370, 370, 370, 371, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 369, 370, 370, 370, 371, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 369, 370, 370, 370, 371, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 277, 278, 279, 370, 370, 370, 280, 281, 282, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 561, 479, 479, 479, 479,
        479, 558, 479, 479, 479, 479, 479, 479, 479, 479, 479, 316, 320, 320, 320, 320, 320, 320, 320, 321, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 273, 638, 638, 638, 639, 479, 479, 479, 479,
        479, 636, 637, 637, 275, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 314, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 314, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 273, 638, 638, 638, 638, 638, 638, 639, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 280, 281, 281, 275, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 479, 479, 479, 314, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 479, 479, 479, 314, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 312, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 479, 479, 479, 280, 476, 477, 468, 468, 468, 468, 468, 469, 470, 471, 468, 468, 474, 475, 476, 477, 639, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
        479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479
    ]

    this.collisionMap = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 9, 8, 0, 0, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 3, 2, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 6, 0, 0, 0, 0, 0, 9, 8, 8, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 0, 0, 0, 0, 0,
        0, 0, 8, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]

    this.gravityPull = function (object) {
        if (object.y >= this.worldHeight - object.height) {
            object.y = this.worldHeight - object.height;
            object.jumping = false;
        };
    }

    this.collisionCheck = function (object) {
        if (object.x >= this.worldWidth - object.width) {
            object.x = this.worldWidth - object.width;
        } else if (object.x <= 0) {
            object.x = 0;
        }
        if (object.y <= 0) {
            object.y = 0;
        }

        // perform tile collision checks
        // 1. Check collision at player's four corners
        // 2. Pass value through to routing to perform execution collisions for TRBL

        let top, right, bottom, left, value;

        // Check collision of object corners; position of that corner --> the tile that it would be in (when represented in the collisionMap)
        // top-left
        left = Math.floor(this.player.x / this.tilesize);           // WHY DUPLICATE LEFT, RIGHT, BOTTOM, TOP?
        top = Math.floor(this.player.y / this.tilesize);            // E.g. In top-right and bottom-right corners,
        value = this.collisionMap[(top * this.columns) + left];     // when top-right collision is resolved, top-right may 
        this.collider.collide(value);                               // have updated. If bottom-right was using the same right value as top right it may not accurately reflect where the right in bottom-right is? This is Impossible scenario?

        right = Math.floor(this.player.x / this.tilesize + 1);
        top = Math.floor(this.player.y / this.tilesize);
        value = this.collisionMap[(top * this.columns) + right];
        this.collider.collide(value);

        // bottom-right
        right = Math.floor(this.player.x / this.tilesize + 1);
        bottom = Math.floor(this.player.y / this.tilesize + 1);
        value = this.collisionMap[(bottom * this.columns) + right];
        this.collider.collide(value);

        // bottom-left
        left = Math.floor(this.player.x / this.tilesize);
        bottom = Math.floor(this.player.y / this.tilesize + 1);
        value = this.collisionMap[(bottom * this.columns) + left];
        this.collider.collide(value);
    };

    this.update = function (object) {
        object.y += this.gravity;

        this.collisionCheck(this.player);
        this.gravityPull(this.player);
    };
};

Game.Player = function () {
    this.height = 32;
    this.width = 32;
    this.prevX;
    this.prevY;
    this.x = 200;
    this.y = 480;
    this.speed = 4;
    this.jumping = true;

    this.getPrevX = function () { return this.prevX; };
    this.getPrevY = function () { return this.prevY; };
    this.getX = function () { return this.x; };
    this.getY = function () { return this.y; };
    this.getWidth = function () { return this.width; };
    this.getHeight = function () { return this.height; };

    this.moveLeft = function () {
        this.x -= this.speed;
    }

    this.moveRight = function () {
        this.x += this.speed;
    }

    this.jump = function () {
        if (!this.jumping) {
            this.y -= 84;
            this.jumping = true;
        }
    }
};

Game.Collider = function () {

    this.collide = function () {

    }
}